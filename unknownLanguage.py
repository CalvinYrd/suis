import os, string

clear = lambda: [os.system("cls") if os.name == "nt" else os.system("clear")]

chars = {"}}¤}~" : "²", "}}¤}}~" : "&", "}}¤}}}~" : "é", "}}¤}}}}~" : "\"", "}}¤}}}}}~" : "'", "}}¤}}}}}}~" : "(", "}}¤}}}}}}}~" : "-", "}}¤}}}}}}}}~" : "è", "}}¤}}}}}}}}}~" : "_", "}}¤}}}}}}}}}}~" : "ç", "}}¤}}}}}}}}}}}~" : "à", "}}¤}}}}}}}}}}}}~" : ")", "}}¤}}}}}}}}}}}}}~" : "=", "}}¤}}}}}}}}}}}}}}}}~" : "/", "}}¤}}}}}}}}}}}}}}}}}~" : "*", "}}¤}}}}}}}}}}}}}}}}}}~" : "-", "}}}¤}}~" : "a", "}}}¤}}}~" : "z", "}}}¤}}}}~" : "e", "}}}¤}}}}}~" : "r", "}}}¤}}}}}}~" : "t", "}}}¤}}}}}}}~" : "y", "}}}¤}}}}}}}}~" : "u", "}}}¤}}}}}}}}}~" : "i", "}}}¤}}}}}}}}}}~" : "o", "}}}¤}}}}}}}}}}}~" : "p", "}}}¤}}}}}}}}}}}}~" : "^", "}}}¤}}}}}}}}}}}}}~" : "$", "}}}¤}}}}}}}}}}}}}}}~" : "7", "}}}¤}}}}}}}}}}}}}}}}~" : "8", "}}}¤}}}}}}}}}}}}}}}}}~" : "9", "}}}¤}}}}}}}}}}}}}}}}}}~" : "+", "}}}}¤}}~" : "q", "}}}}¤}}}~" : "s", "}}}}¤}}}}~" : "d", "}}}}¤}}}}}~" : "f", "}}}}¤}}}}}}~" : "g", "}}}}¤}}}}}}}~" : "h", "}}}}¤}}}}}}}}~" : "j", "}}}}¤}}}}}}}}}~" : "k", "}}}}¤}}}}}}}}}}~" : "l", "}}}}¤}}}}}}}}}}}~" : "m", "}}}}¤}}}}}}}}}}}}~" : "ù", "}}}}¤}}}}}}}}}}}}}~" : "*", "}}}}¤}}}}}}}}}}}}}}}~" : "4", "}}}}¤}}}}}}}}}}}}}}}}~" : "5", "}}}}¤}}}}}}}}}}}}}}}}}~" : "6", "}}}}¤}}}}}}}}}}}}}}}}}}~" : "+", "}}}}}¤}}~" : "<", "}}}}}¤}}}~" : "w", "}}}}}¤}}}}~" : "x", "}}}}}¤}}}}}~" : "c", "}}}}}¤}}}}}}~" : "v", "}}}}}¤}}}}}}}~" : "b", "}}}}}¤}}}}}}}}~" : "n", "}}}}}¤}}}}}}}}}~" : ",", "}}}}}¤}}}}}}}}}}~" : ";", "}}}}}¤}}}}}}}}}}}~" : ":", "}}}}}¤}}}}}}}}}}}}~" : "!", "}}}}}¤}}}}}}}}}}}}}}~" : "1", "}}}}}¤}}}}}}}}}}}}}}}~" : "2", "}}}}}¤}}}}}}}}}}}}}}}}~" : "3", "}}}}}}¤}}}}}}}}}}}~" : "0", "}}}}}}¤}}}}}}}}}}}}~" : ".", "}}¤}}~~" : "1", "}}¤}}}~~" : "2", "}}¤}}}}~~" : "3", "}}¤}}}}}~~" : "4", "}}¤}}}}}}~~" : "5", "}}¤}}}}}}}~~" : "6", "}}¤}}}}}}}}~~" : "7", "}}¤}}}}}}}}}~~" : "8", "}}¤}}}}}}}}}}~~" : "9", "}}¤}}}}}}}}}}}~~" : "0", "}}¤}}}}}}}}}}}}~~" : "°", "}}¤}}}}}}}}}}}}}~~" : "+", "}}}¤}}~~" : "A", "}}}¤}}}~~" : "Z", "}}}¤}}}}~~" : "E", "}}}¤}}}}}~~" : "R", "}}}¤}}}}}}~~" : "T", "}}}¤}}}}}}}~~" : "Y", "}}}¤}}}}}}}}~~" : "U", "}}}¤}}}}}}}}}~~" : "I", "}}}¤}}}}}}}}}}~~" : "O", "}}}¤}}}}}}}}}}}~~" : "P", "}}}¤}}}}}}}}}}}}~~" : "¨", "}}}¤}}}}}}}}}}}}}~~" : "£", "}}}}¤}}~~" : "Q", "}}}}¤}}}~~" : "S", "}}}}¤}}}}~~" : "D", "}}}}¤}}}}}~~" : "F", "}}}}¤}}}}}}~~" : "G", "}}}}¤}}}}}}}~~" : "H", "}}}}¤}}}}}}}}~~" : "J", "}}}}¤}}}}}}}}}~~" : "K", "}}}}¤}}}}}}}}}}~~" : "L", "}}}}¤}}}}}}}}}}}~~" : "M", "}}}}¤}}}}}}}}}}}}~~" : "%", "}}}}¤}}}}}}}}}}}}}~~" : "µ", "}}}}}¤}}~~" : ">", "}}}}}¤}}}~~" : "W", "}}}}}¤}}}}~~" : "X", "}}}}}¤}}}}}~~" : "C", "}}}}}¤}}}}}}~~" : "V", "}}}}}¤}}}}}}}~~" : "B", "}}}}}¤}}}}}}}}~~" : "N", "}}}}}¤}}}}}}}}}~~" : "?", "}}}}}¤}}}}}}}}}}~~" : ".", "}}}}}¤}}}}}}}}}}}~~" : "/", "}}}}}¤}}}}}}}}}}}}~~" : "§", "}}¤}}}~¤~" : "~", "}}¤}}}}~¤~" : "#", "}}¤}}}}}~¤~" : "{", "}}¤}}}}}}~¤~" : "[", "}}¤}}}}}}}~¤~" : "|", "}}¤}}}}}}}}~¤~" : "`", "}}¤}}}}}}}}}~¤~" : "\\", "}}¤}}}}}}}}}}~¤~" : "^", "}}¤}}}}}}}}}}}~¤~" : "@", "}}¤}}}}}}}}}}}}~¤~" : "]", "}}¤}}}}}}}}}}}}}~¤~" : "}", "}}}¤}}}}~¤~" : "€", "}}}¤}}}}}}}}}}}}}~¤~" : "¤"}
clear()

with open("test.ul", "r", encoding = "utf-8") as file:
	with open("__exectempcode__.py", "w", encoding = "utf-8") as tempCode:
		for line in [i for i in file.readlines() if not i.startswith("~~") and i.replace("¤", "") != "\n"]:

			line = line.split("~")
			line[-1] = "\n"

			for charIndex in range(len(line)):
				try:
					if line[charIndex].startswith("¤"):
						spacesAmount = len(line[charIndex].split("}}")[0].replace(" ", "")) + 1
						charIndex = (spacesAmount * ' ') + line[charIndex]

				except IndexError: pass

			for charIndex in range(len(line)):
				if line[charIndex].count("¤") == 2:
					line[charIndex] = line[charIndex].replace("}}¤}¤", "}}¤}}}}}}}}}}")

			for charIndex in range(len(line)):
				try:
					if line[charIndex + 1] == "¤":
						line[charIndex] += "~¤~"
						del line[charIndex + 1]

					elif not line[charIndex + 1]:
						line[charIndex] += "~~"
						del line[charIndex + 1]

					else:
						line[charIndex] += "~"

				except IndexError: pass

				try:
					if line[charIndex].startswith("¤"):	####
						line[charIndex] = line[charIndex][1:]

					line[charIndex] = chars[line[charIndex]]

				except (KeyError, IndexError): pass

			tempCode.write("".join(line))

os.system("py __exectempcode__.py")
